//
// Created by bordplate on 12/27/2022.
//

#ifndef RAC1_MULTIPLAYER_LOGGER_H
#define RAC1_MULTIPLAYER_LOGGER_H

#ifdef __cplusplus

// Most of this class was generated by ChatGPT.

//#include <cstdio>
//#include <cstdarg>

enum LogLevel {
    Trace,
    Debug,
    Info,
    Warning,
    Error,
    Critical
};

class Logger {
public:
    static void set_log_level(LogLevel level) { log_level_ = level; }
    static LogLevel log_level() { return log_level_; }

    static void log(LogLevel level, const char* message, va_list args) {
        if (level < Logger::log_level_) return;

        const char* level_str;
        switch (level) {
            case Trace: level_str = "TRACE"; break;
            case Debug: level_str = "DEBUG"; break;
            case Info: level_str = "INFO"; break;
            case Warning: level_str = "WARNING"; break;
            case Error: level_str = "ERROR"; break;
            case Critical: level_str = "CRITICAL"; break;
            default: level_str = "UNKNOWN"; break;
        }

        printf("[%s] ", level_str);
        vprintf(message, args);
        printf("\n");
    }

    static void trace(const char* message, ...) {
        va_list args;
        va_start(args, message);
        log(Trace, message, args);
        va_end(args);
    }

    static void debug(const char* message, ...) {
        va_list args;
        va_start(args, message);
        log(Debug, message, args);
        va_end(args);
    }

    static void info(const char* message, ...) {
        va_list args;
        va_start(args, message);
        log(Info, message, args);
        va_end(args);
    }

    static void warning(const char* message, ...) {
        va_list args;
        va_start(args, message);
        log(Warning, message, args);
        va_end(args);
    }

    static void error(const char* message, ...) {
        va_list args;
        va_start(args, message);
        log(Error, message, args);
        va_end(args);
    }

    static void critical(const char* message, ...) {
        va_list args;
        va_start(args, message);
        log(Critical, message, args);
        va_end(args);
    }
private:
    static LogLevel log_level_;
};


#endif

#endif //RAC1_MULTIPLAYER_LOGGER_H
