// DO NOT EDIT THIS FILE UNLESS YOU KNOW WHAT YOU ARE DOING

#ifndef MODULE_INIT
#define MODULE_INIT
// PS3 system includes
#include <sys/prx.h>
//#include <sys/tty.h>
//#include <sys/syscall.h>
//#include <stdio.h>

#include "lib/common.h"
#include "lib/shk.h"
#include "lib/module.h"
#include "lib/string.h"

#include "lib/memory.h"

SYS_MODULE_INFO( mod, 0, 1, 1 );
SYS_MODULE_START( _start );
SYS_MODULE_STOP( _stop );

// runtime initialisation
extern "C" extern void* _shk_elf_prx_ptr_table;
extern "C" extern void* _shk_prx_ptr_table;
extern "C" extern void _shk_prx_elf_substitute_impl();

SHK_HOOK( void, _shk_prx_elf_substitute );

#define LOADER_TRACE_LOG 0
#define LOADER_LOG( msg, ... ) printf( "modprx loader: " msg, ##__VA_ARGS__ )
#if LOADER_TRACE_LOG
#define LOADER_TRACE( msg, ... ) printf( "modprx loader: " msg, ##__VA_ARGS__ )
#else
#define LOADER_TRACE( msg, ... ) do {} while ( false )
#endif

extern "C" void __cxa_pure_virtual() { while (1); }

extern "C" void _c_game_start();
extern "C" void initRuntime() {
    LOADER_LOG("initialising runtime\n");

    // initialize pointer to prx function pointer table in elf
    *(void **) &_shk_elf_prx_ptr_table = &_shk_prx_ptr_table;

    // bind hook to function that was substituted (copied to the prx) to make room for the loader
    SHK_BIND_HOOK(_shk_prx_elf_substitute, _shk_prx_elf_substitute_impl);

    LOADER_LOG("runtime initialised\n");
}

extern "C" void _c_game_quit();
extern "C" s32 _stop(void) {
    LOADER_LOG("shutting down\n");

    _c_game_quit();

    LOADER_LOG("shutting down modules\n");
    for (u32 i = 0; i < moduleGetModuleCount(); ++i)
        moduleShutdownModule(moduleGetModuleByIndex(i));

    LOADER_LOG("shutdown finished\n");
    return SYS_PRX_STOP_OK;
}

extern "C" void __exit_user_prx_modules() {
    _stop();
}

//extern "C" void __fini() {
//    _stop();
//}

extern "C" void _exit() {
    _stop();
}

extern "C" s32 _start(void) {
    LOADER_LOG("initialising\n");
    initRuntime();

    LOADER_LOG("initialising modules\n");
    for (u32 i = 0; i < moduleGetModuleCount(); ++i)
        moduleInitModule(moduleGetModuleByIndex(i));

    _c_game_start();

    return SYS_PRX_RESIDENT;
}

#endif